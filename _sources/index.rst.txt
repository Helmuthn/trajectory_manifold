.. Trajectory Manifold documentation master file, created by
   sphinx-quickstart on Thu Apr  6 14:10:26 2023.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Trajectory Manifold
===============================================

This is a Python library for doing statistics on the manifold of trajectories
implicitly defined by a differential equation.

.. note::

   This project is under active development for an anticipated paper submission.

The key feature of this library is the ability to push densities
through the implicit transformation between the state space of the system
and the trajectory manifold.


Usage
=====

Installation
------------

Installation is to come later. This code will eventually be turned into a 
package to be installed with pip.

Quick Start 
-----------

Trajectory estimation over any finite time-horizon is a reparameterization
of the state estimation problem for a system.
Thus, the only change to classical estimation methods is to incorporate the
reparameterization to the objective function.

The key function in the library is ``manifold.system_pushforward_weight``.


Given a description of the dynamics and forecasting objective, this function
constructs the associated reweighting for a given point.

API 
===

Manifold 
--------

The core functionality is found in the `trajectory_manifold.manifold` module.

.. automodule:: trajectory_manifold.manifold
   :members: system_sensitivity, system_pushforward_weight, system_pushforward_weight_reweighted

   .. py:class:: trajectory_manifold.manifold.SolverParameters(NamedTuple)

      Stores Information for ODE Solvers. 

      Records the parameters for solving an ODE using Diffrax,
      including the solver, tolerances, output grid size, and time horizon
    
      :param relative_tolerance: Relative tolerance for the ODE solution
      :param absolute_tolerance: Absolute tolerance for the ODE solution
      :param step_size: Output mesh size. Note: Does not impact internal computations.
      :param time_horizon: Length of the solution in seconds.
      :param solver: The particular ODE solver to use.


Estimation 
----------

The module `trajectory_manifold.estimation` contains example estimation algorithms
using the trajectory manifold reweighting. While these functions are essentially
plug-and-play for new problems, they are not the best implementations and 
serve primarily as a proof of concept.

.. automodule:: trajectory_manifold.estimation 
   :members: 

Optimization 
------------

The module `trajectory_manifold.optimize` contains a couple of optimization 
procedures for the estimators.
The main one of which is an implementation of a simulated annealing optimizer. 

.. automodule:: trajectory_manifold.optimize
   :members:

Helpers
-------

The module `trajectory_manifold.helpers` contains a collection of helper functions
for the small modifications to linear algebra operations required in the
project.

.. automodule:: trajectory_manifold.helpers 
   :members:

Examples 
--------

The module `trajectory_manifold.examples` contains a collection of example systems 
to be used with the trajectory forecasting work.
It contains functions which generate vector fields for a linear system,
a periodic system, and a chaotic system.

.. automodule:: trajectory_manifold.examples
   :members: